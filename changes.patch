diff --git a/arch/arm/configs/aosp_yukon_flamingo_defconfig b/arch/arm/configs/aosp_yukon_flamingo_defconfig
index 89b7ff3..3e9e5c9 100644
--- a/arch/arm/configs/aosp_yukon_flamingo_defconfig
+++ b/arch/arm/configs/aosp_yukon_flamingo_defconfig
@@ -58,7 +58,14 @@ CONFIG_MSM_ENABLE_WDOG_DEBUG_CONTROL=y
 CONFIG_MSM_BOOT_STATS=y
 CONFIG_STRICT_MEMORY_RWX=y
 CONFIG_SMP=y
-# CONFIG_SMP_ON_UP is not set
+CONFIG_ZRAM=y
+CONFIG_ZRAM_LZ4_COMPRESS=y
+#CONFIG_ZRAM_DEBUG=y
+CONFIG_ZSMALLOC=y
+#CONFIG_ZSMALLOC=y
+CONFIG_SWAP=y
+CONFIG_CGROUP_MEM_RES_CTLR=y
+CONFIG_CGROUP_MEM_RES_CTLR_SWAP=y# CONFIG_SMP_ON_UP is not set
 CONFIG_SCHED_MC=y
 CONFIG_SCHED_SMT=y
 CONFIG_PREEMPT=y
diff --git a/arch/arm/include/asm/xor.h b/arch/arm/include/asm/xor.h
index 7604673..3caf848 100644
--- a/arch/arm/include/asm/xor.h
+++ b/arch/arm/include/asm/xor.h
@@ -7,7 +7,10 @@
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
+#include <linux/hardirq.h>
 #include <asm-generic/xor.h>
+#include <asm/hwcap.h>
+#include <asm/neon.h>
 
 #define __XOR(a1, a2) a1 ^= a2
 
@@ -138,4 +141,73 @@ static struct xor_block_template xor_block_arm4regs = {
 		xor_speed(&xor_block_arm4regs);	\
 		xor_speed(&xor_block_8regs);	\
 		xor_speed(&xor_block_32regs);	\
+		NEON_TEMPLATES;			\
 	} while (0)
+
+#ifdef CONFIG_KERNEL_MODE_NEON
+extern struct xor_block_template const xor_block_neon_inner;
+
+static void
+xor_neon_2(unsigned long bytes, unsigned long *p1, unsigned long *p2)
+{
+	if (in_interrupt()) {
+		xor_arm4regs_2(bytes, p1, p2);
+	} else {
+		kernel_neon_begin();
+		xor_block_neon_inner.do_2(bytes, p1, p2);
+		kernel_neon_end();
+	}
+}
+
+static void
+xor_neon_3(unsigned long bytes, unsigned long *p1, unsigned long *p2,
+		unsigned long *p3)
+{
+	if (in_interrupt()) {
+		xor_arm4regs_3(bytes, p1, p2, p3);
+	} else {
+		kernel_neon_begin();
+		xor_block_neon_inner.do_3(bytes, p1, p2, p3);
+		kernel_neon_end();
+	}
+}
+
+static void
+xor_neon_4(unsigned long bytes, unsigned long *p1, unsigned long *p2,
+		unsigned long *p3, unsigned long *p4)
+{
+	if (in_interrupt()) {
+		xor_arm4regs_4(bytes, p1, p2, p3, p4);
+	} else {
+		kernel_neon_begin();
+		xor_block_neon_inner.do_4(bytes, p1, p2, p3, p4);
+		kernel_neon_end();
+	}
+}
+
+static void
+xor_neon_5(unsigned long bytes, unsigned long *p1, unsigned long *p2,
+		unsigned long *p3, unsigned long *p4, unsigned long *p5)
+{
+	if (in_interrupt()) {
+		xor_arm4regs_5(bytes, p1, p2, p3, p4, p5);
+	} else {
+		kernel_neon_begin();
+		xor_block_neon_inner.do_5(bytes, p1, p2, p3, p4, p5);
+		kernel_neon_end();
+	}
+}
+
+static struct xor_block_template xor_block_neon = {
+	.name	= "neon",
+	.do_2	= xor_neon_2,
+	.do_3	= xor_neon_3,
+	.do_4	= xor_neon_4,
+	.do_5	= xor_neon_5
+};
+
+#define NEON_TEMPLATES	\
+	do { if (cpu_has_neon()) xor_speed(&xor_block_neon); } while (0)
+#else
+#define NEON_TEMPLATES
+#endif
diff --git a/arch/arm/lib/Makefile b/arch/arm/lib/Makefile
index 9685f8d..90d24e0 100644
--- a/arch/arm/lib/Makefile
+++ b/arch/arm/lib/Makefile
@@ -49,3 +49,9 @@ lib-$(CONFIG_ARCH_SHARK)	+= io-shark.o
 
 $(obj)/csumpartialcopy.o:	$(obj)/csumpartialcopygeneric.S
 $(obj)/csumpartialcopyuser.o:	$(obj)/csumpartialcopygeneric.S
+
+ifeq ($(CONFIG_KERNEL_MODE_NEON),y)
+  NEON_FLAGS			:= -mfloat-abi=softfp -mfpu=neon
+  CFLAGS_xor-neon.o		+= $(NEON_FLAGS)
+  lib-$(CONFIG_XOR_BLOCKS)	+= xor-neon.o
+endif
diff --git a/arch/arm/lib/bswapsdi2.S b/arch/arm/lib/bswapsdi2.S
new file mode 100644
index 0000000..7c73d81
--- /dev/null
+++ b/arch/arm/lib/bswapsdi2.S
@@ -0,0 +1,34 @@
+#include <linux/linkage.h>
+#include <asm/assembler.h>
+#if __LINUX_ARM_ARCH__ >= 6
+ENTRY(__bswapsi2)
+	rev r0, r0
+	bx lr
+ENDPROC(__bswapsi2)
+ENTRY(__bswapdi2)
+	rev r3, r0
+	rev r0, r1
+	mov r1, r3
+	bx lr
+ENDPROC(__bswapdi2)
+#else
+ENTRY(__bswapsi2)
+	eor r3, r0, r0, ror #16
+	mov r3, r3, lsr #8
+	bic r3, r3, #0xff00
+	eor r0, r3, r0, ror #8
+	ret lr
+ENDPROC(__bswapsi2)
+ENTRY(__bswapdi2)
+	mov ip, r1
+	eor r3, ip, ip, ror #16
+	eor r1, r0, r0, ror #16
+	mov r1, r1, lsr #8
+	mov r3, r3, lsr #8
+	bic r3, r3, #0xff00
+	bic r1, r1, #0xff00
+	eor r1, r1, r0, ror #8
+	eor r0, r3, ip, ror #8
+	ret lr
+ENDPROC(__bswapdi2)
+#endif
diff --git a/arch/arm/lib/xor-neon.c b/arch/arm/lib/xor-neon.c
new file mode 100644
index 0000000..969bfeb
--- /dev/null
+++ b/arch/arm/lib/xor-neon.c
@@ -0,0 +1,45 @@
+/*
+ * linux/arch/arm/lib/xor-neon.c
+ *
+ * Copyright (C) 2013 Linaro Ltd <ard.biesheuvel@linaro.org>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/raid/xor.h>
+
+#ifndef __ARM_NEON__
+#error You should compile this file with '-mfloat-abi=softfp -mfpu=neon'
+#endif
+
+/*
+ * Pull in the reference implementations while instructing GCC (through
+ * -ftree-vectorize) to attempt to exploit implicit parallelism and emit
+ * NEON instructions.
+ */
+
+#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
+#pragma GCC optimize "tree-vectorize"
+#else
+
+  /*
+   * While older versions of GCC do not generate incorrect code, they fail to
+   * recognize the parallel nature of these functions, and emit plain ARM code,
+   * which is known to be slower than the optimized ARM code in asm-arm/xor.h.
+   */
+
+#warning This code requires at least version 4.6 of GCC
+#endif
+
+#pragma GCC diagnostic ignored "-Wunused-variable"
+#include <asm-generic/xor.h>
+
+struct xor_block_template const xor_block_neon_inner = {
+	.name	= "__inner_neon__",
+	.do_2	= xor_8regs_2,
+	.do_3	= xor_8regs_3,
+	.do_4	= xor_8regs_4,
+	.do_5	= xor_8regs_5,
+};
diff --git a/drivers/media/platform/msm/camera_v2/Kconfig b/drivers/media/platform/msm/camera_v2/Kconfig
index 375e56d..dfddbe7 100644
--- a/drivers/media/platform/msm/camera_v2/Kconfig
+++ b/drivers/media/platform/msm/camera_v2/Kconfig
@@ -238,6 +238,14 @@ config s5k4e1
 		and QSXGA snapshot at 15 fps.
 		This sensor driver does not support auto focus.
 
+config S5K5E2
+	bool "Sensor s5k5eayx (BAYER 5MP)"
+	depends on MSMB_CAMERA
+	---help---
+		Samsung 5 MP BAYER Sensor. It uses 2 mipi lanes,
+		supports 960P preview at 30 fps
+		and 2560x1920 snapshot at 15 fps.
+
 config OV12830
 	bool "OmniVision OV12830 (BAYER 12MP)"
 	depends on MSMB_CAMERA
diff --git a/drivers/media/platform/msm/camera_v2/sensor/Makefile b/drivers/media/platform/msm/camera_v2/sensor/Makefile
index 09afb7b..72dce93 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/Makefile
+++ b/drivers/media/platform/msm/camera_v2/sensor/Makefile
@@ -9,3 +9,4 @@ obj-$(CONFIG_MT9M114) += mt9m114.o
 obj-$(CONFIG_OV5645) += ov5645.o
 obj-$(CONFIG_OV5645) += ov7695.o
 obj-$(CONFIG_GC0310) += gc0310.o
+obj-$(CONFIG_S5K5E2) += s5k5e2.o
diff --git a/drivers/media/platform/msm/camera_v2/sensor/s5k5e2.c b/drivers/media/platform/msm/camera_v2/sensor/s5k5e2.c
new file mode 100644
index 0000000..29717b8
--- /dev/null
+++ b/drivers/media/platform/msm/camera_v2/sensor/s5k5e2.c
@@ -0,0 +1,256 @@
+/* Copyright (c) 2013, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+#include "msm_sensor.h"
+#include "msm_camera_io_util.h"
+#define S5K5E2_SENSOR_NAME "s5k5e2"
+DEFINE_MSM_MUTEX(s5k5e2_mut);
+static ssize_t s5k5e2_read_version_attr(struct device *dev,struct device_attribute *attr, char *buf);
+static DEVICE_ATTR(read_version, 0664, s5k5e2_read_version_attr, NULL);
+static ssize_t s5k5e2_read_vendor_attr(struct device *dev,struct device_attribute *attr, char *buf);
+static DEVICE_ATTR(read_vendor, 0664, s5k5e2_read_vendor_attr, NULL);
+static struct msm_sensor_ctrl_t s5k5e2_s_ctrl;
+
+static struct msm_sensor_power_setting s5k5e2_power_setting[] = {
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_VANA,
+		.config_val = GPIO_OUT_LOW,
+		.delay = 0,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_VANA,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 0,
+	}, 
+	{	.seq_type = SENSOR_VREG,
+		.seq_val = CAM_VDIG,
+		.config_val = 0,
+		.delay = 0,
+	},
+	{	.seq_type = SENSOR_VREG,  ///only USE for i2c pull high 	
+		.seq_val = CAM_VIO,
+		.config_val = 0,
+		.delay = 0,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_VAF,
+		.config_val = GPIO_OUT_LOW,
+		.delay = 0,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_VAF,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 0,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_RESET,
+		.config_val = GPIO_OUT_LOW,
+		.delay = 0,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_RESET,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_CLK,
+		.seq_val = SENSOR_CAM_MCLK,
+		.config_val = 24000000,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_I2C_MUX,
+		.seq_val = 0,
+		.config_val = 0,
+		.delay = 0,
+	},
+};
+
+static struct v4l2_subdev_info s5k5e2_subdev_info[] = {
+	{
+		.code   = V4L2_MBUS_FMT_SGRBG10_1X10,
+		.colorspace = V4L2_COLORSPACE_JPEG,
+		.fmt    = 1,
+		.order    = 0,
+	},
+};
+
+static const struct i2c_device_id s5k5e2_i2c_id[] = {
+	{S5K5E2_SENSOR_NAME, (kernel_ulong_t)&s5k5e2_s_ctrl},
+	{ }
+};
+
+static int32_t msm_s5k5e2_i2c_probe(struct i2c_client *client,
+	const struct i2c_device_id *id)
+{
+	return msm_sensor_i2c_probe(client, id, &s5k5e2_s_ctrl);
+}
+
+static struct i2c_driver s5k5e2_i2c_driver = {
+	.id_table = s5k5e2_i2c_id,
+	.probe  = msm_s5k5e2_i2c_probe,
+	.driver = {
+		.name = S5K5E2_SENSOR_NAME,
+	},
+};
+
+static struct msm_camera_i2c_client s5k5e2_sensor_i2c_client = {
+	.addr_type = MSM_CAMERA_I2C_WORD_ADDR,
+};
+
+static const struct of_device_id s5k5e2_dt_match[] = {
+	{.compatible = "qcom,s5k5e2", .data = &s5k5e2_s_ctrl},
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, s5k5e2_dt_match);
+
+static struct platform_driver s5k5e2_platform_driver = {
+	.driver = {
+		.name = "qcom,s5k5e2",
+		.owner = THIS_MODULE,
+		.of_match_table = s5k5e2_dt_match,
+	},
+};
+
+static int32_t s5k5e2_platform_probe(struct platform_device *pdev)
+{
+	int32_t rc = 0,ret;
+	const struct of_device_id *match;
+	pr_info("%s:%d\n", __func__, __LINE__);	
+	match = of_match_device(s5k5e2_dt_match, &pdev->dev);
+	rc = msm_sensor_platform_probe(pdev, match->data);
+	pr_info("%s:%d\n", __func__, __LINE__);
+	ret = device_create_file(&(pdev->dev), &dev_attr_read_version);
+	if (0 != ret)
+		pr_err("%s:%d creating attribute failed \n", __func__,__LINE__);
+	ret = device_create_file(&(pdev->dev), &dev_attr_read_vendor);
+	if (0 != ret)
+		pr_err("%s:%d creating attribute failed \n", __func__,__LINE__);
+	return rc;
+}
+
+static int __init s5k5e2_init_module(void)
+{
+	int32_t rc = 0;
+	pr_info("%s:%d\n", __func__, __LINE__);
+	rc = platform_driver_probe(&s5k5e2_platform_driver,
+		s5k5e2_platform_probe);
+	if (!rc)
+		return rc;
+	pr_err("%s:%d rc %d\n", __func__, __LINE__, rc);
+	return i2c_add_driver(&s5k5e2_i2c_driver);
+}
+
+static void __exit s5k5e2_exit_module(void)
+{
+	pr_info("%s:%d\n", __func__, __LINE__);
+	if (s5k5e2_s_ctrl.pdev) {
+		msm_sensor_free_sensor_data(&s5k5e2_s_ctrl);
+		platform_driver_unregister(&s5k5e2_platform_driver);
+	} else
+		i2c_del_driver(&s5k5e2_i2c_driver);
+	return;
+}
+
+static struct msm_sensor_ctrl_t s5k5e2_s_ctrl = {
+	.sensor_i2c_client = &s5k5e2_sensor_i2c_client,
+	.power_setting_array.power_setting = s5k5e2_power_setting,
+	.power_setting_array.size = ARRAY_SIZE(s5k5e2_power_setting),
+	.msm_sensor_mutex = &s5k5e2_mut,
+	.sensor_v4l2_subdev_info = s5k5e2_subdev_info,
+	.sensor_v4l2_subdev_info_size = ARRAY_SIZE(s5k5e2_subdev_info),
+};
+
+module_init(s5k5e2_init_module);
+module_exit(s5k5e2_exit_module);
+MODULE_DESCRIPTION("s5k5e2");
+MODULE_LICENSE("GPL v2");
+
+static ssize_t s5k5e2_read_version_attr(struct device *dev,struct device_attribute *attr, char *buf)
+{
+	struct msm_sensor_ctrl_t *s_ctrl;
+	int32_t power_flag = 0;
+	int32_t rc = 0;
+	uint16_t version = 0;
+
+	pr_err("ov7695_read_id device addr= %x\n",(uint32_t)dev);
+	pr_err("get driver addr =%x \n",(uint32_t)dev_get_drvdata(dev));
+	s_ctrl = &s5k5e2_s_ctrl;
+
+	if(s_ctrl->sensor_state != MSM_SENSOR_POWER_UP)
+	{
+		s_ctrl->func_tbl->sensor_power_up(s_ctrl);
+		power_flag =1;
+	}
+
+	rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->i2c_read(
+			s_ctrl->sensor_i2c_client,
+			0x0002,
+			&version, MSM_CAMERA_I2C_WORD_DATA);
+	if (rc < 0) {
+		pr_err("%s: %s: read id failed\n", __func__,
+			s_ctrl->sensordata->sensor_name);
+	}
+
+	if(power_flag == 1)
+	{
+		s_ctrl->func_tbl->sensor_power_down(s_ctrl);
+	}
+
+	 return sprintf(buf, "%x\n", version);
+}
+
+static struct msm_camera_i2c_reg_conf s5k5e2_read_eeprom[] = {
+	{0x0A00 ,0x04},
+	{0x0A02 ,0x02},
+	{0x0A00 ,0x01},
+};
+
+static ssize_t s5k5e2_read_vendor_attr(struct device *dev,struct device_attribute *attr, char *buf)
+{
+	struct msm_sensor_ctrl_t *s_ctrl;
+	int32_t power_flag = 0;
+	int32_t rc = 0;
+	uint16_t version = 0;
+
+
+	s_ctrl = &s5k5e2_s_ctrl;
+
+	if(s_ctrl->sensor_state != MSM_SENSOR_POWER_UP)
+	{
+		s_ctrl->func_tbl->sensor_power_up(s_ctrl);
+		power_flag =1;
+	}
+	rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->i2c_write_conf_tbl(
+							s_ctrl->sensor_i2c_client,
+							s5k5e2_read_eeprom,
+							sizeof(s5k5e2_read_eeprom), MSM_CAMERA_I2C_BYTE_DATA);
+	msleep(5);
+	rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->i2c_read(
+					s_ctrl->sensor_i2c_client,
+					0x0A06,
+					&version, MSM_CAMERA_I2C_BYTE_DATA);
+	pr_err("%s: %x: version\n", __func__,		version		);
+	if(power_flag == 1)
+	{
+		s_ctrl->func_tbl->sensor_power_down(s_ctrl);
+	}
+
+	 return sprintf(buf, "%x\n", version);
+}
diff --git a/drivers/mmc/core/core.c b/drivers/mmc/core/core.c
index aa2ec38..2e4c2ee 100644
--- a/drivers/mmc/core/core.c
+++ b/drivers/mmc/core/core.c
@@ -69,7 +69,7 @@ static const unsigned freqs[] = { 400000, 300000, 200000, 100000 };
  * performance cost, and for other reasons may not always be desired.
  * So we allow it it to be disabled.
  */
-bool use_spi_crc = 1;
+bool use_spi_crc = 0;
 module_param(use_spi_crc, bool, 0);
 
 /*
